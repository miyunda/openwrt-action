name: Build an OpenWrt
on:
  workflow_dispatch:
    inputs:
        retention_days:
          description: 'Keep this many days for Actions. only digits (0-9) are allowed'
          required: false
          default: '30'
        retention_versions:
          description: 'How many releases will be kept, only digits (0-9) are allowed'
          required: false
          default: '3'
  
env:
  OPENWRT_REPO_URL: https://github.com/openwrt/openwrt.git
  # OPENWRT_REPO_BRANCH: openwrt-22.03
  OPENWRT_REPO_TAG: v23.05.0
  RUNNER_TZ: Asia/Shanghai
  CUSTOM1: custom1.sh
  CUSTOM2: custom2.sh
  CONFIG_FILE: .config
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  
jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@v1.3.0
      with:
        tool-cache: false
        swap-storage: false

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update -y
        sudo -E apt-get -qq full-upgrade -y
        sudo -E apt-get -qq install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
        git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
        libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
        mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools \
        libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip \
        vim wget xmlto xxd zlib1g-dev python3-setuptools
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo mkdir /build
        sudo chown $USER:$GROUPS /build
        sudo timedatectl set-timezone "$RUNNER_TZ"
        
    - name: Introduce reterntion policies for old releases
      run: |
         if [[ -z "${{ github.event.inputs.retention_days }}" ]] && [[ -z "${{ github.event.inputs.retention_versions }}" ]]; then
           echo "retain_days=30" >> $GITHUB_ENV
           echo "keep_latest=3" >> $GITHUB_ENV
         else
           echo "retain_days=${{ github.event.inputs.retention_days }}" >> $GITHUB_ENV
           echo "keep_latest=${{ github.event.inputs.retention_versions }}" >> $GITHUB_ENV
         fi

    - name: Clone OpenWrt source code
      working-directory: /build
      run: |
        df -hT $PWD
        git clone --depth 1 --branch $OPENWRT_REPO_TAG $OPENWRT_REPO_URL openwrt
        ln -sf /build/openwrt $GITHUB_WORKSPACE/openwrt
        mv -f $GITHUB_WORKSPACE/*.sh openwrt/
        chmod +x openwrt/*.sh

    - name: Customize (1/2) 
      run: |
        cd openwrt
        ./$CUSTOM1

    - name: Update feeds
      run: | 
        cd openwrt
        ./scripts/feeds update -a
  
    - name: Install feeds
      run: | 
        cd openwrt 
        ./scripts/feeds install -a
        ./scripts/feeds install libpam libnetsnmp liblzma

    - name: Customize (2/2)
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        cd openwrt
        ./$CUSTOM2
      env:
        BUILDER: ${{ github.repository_owner }}
        
    - name: Download packages
      id: packages
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
  
    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "{status}={success}" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Collect binary files
      id: collect
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "{status}={success}" >> $GITHUB_OUTPUT

    - name: Populate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        echo "{status}={success}" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: ${{ steps.tag.outputs.status }} == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Clean up Actions
      if: env.REPO_TOKEN
      uses: Mattraks/delete-workflow-runs@main
      with:
        token: ${{ secrets.REPO_TOKEN }}
        repository: ${{ github.repository }}
        keep_minimum_runs: 0
        retain_days: ${{ env.retain_days }}

    - name: Remove old Releases
      if: env.UPLOAD_RELEASE == 'true' && !cancelled() && env.REPO_TOKEN
      uses: dev-drprasad/delete-older-releases@master
      with:
        repo: ${{ github.repository }}
        keep_latest: ${{ env.keep_latest }}
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}